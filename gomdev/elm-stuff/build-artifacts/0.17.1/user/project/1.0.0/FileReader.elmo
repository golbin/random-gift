var _user$project$FileReader$mtypeDecoder = A2(
	_elm_lang$core$Json_Decode$object1,
	_danyx23$elm_mimetype$MimeType$parseMimeType,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string));
var _user$project$FileReader$isTextFile = function (fileRef) {
	var _p0 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$FileReader$mtypeDecoder, fileRef);
	if (_p0.ctor === 'Ok') {
		var _p1 = _p0._0;
		if (_p1.ctor === 'Just') {
			var _p2 = _p1._0;
			if (_p2.ctor === 'Text') {
				return true;
			} else {
				return false;
			}
		} else {
			return true;
		}
	} else {
		return false;
	}
};
var _user$project$FileReader$toString = function (err) {
	var _p3 = err;
	switch (_p3.ctor) {
		case 'ReadFail':
			return 'File reading error';
		case 'NoValidBlob':
			return 'Blob was not valid';
		default:
			return 'Not a text file';
	}
};
var _user$project$FileReader$readAsDataUrl = _user$project$Native_FileReader.readAsDataUrl;
var _user$project$FileReader$readAsArrayBuffer = _user$project$Native_FileReader.readAsArrayBuffer;
var _user$project$FileReader$NativeFile = F4(
	function (a, b, c, d) {
		return {name: a, size: b, mimeType: c, blob: d};
	});
var _user$project$FileReader$nativeFile = A5(
	_elm_lang$core$Json_Decode$object4,
	_user$project$FileReader$NativeFile,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'size', _elm_lang$core$Json_Decode$int),
	_user$project$FileReader$mtypeDecoder,
	_elm_lang$core$Json_Decode$value);
var _user$project$FileReader$fileParser = function (field) {
	return A2(
		_elm_lang$core$Json_Decode$at,
		_elm_lang$core$Native_List.fromArray(
			[field, 'files']),
		A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$List$filterMap(_elm_lang$core$Basics$snd),
			_elm_lang$core$Json_Decode$keyValuePairs(
				_elm_lang$core$Json_Decode$maybe(_user$project$FileReader$nativeFile))));
};
var _user$project$FileReader$parseSelectedFiles = _user$project$FileReader$fileParser('target');
var _user$project$FileReader$parseDroppedFiles = _user$project$FileReader$fileParser('dataTransfer');
var _user$project$FileReader$NotTextFile = {ctor: 'NotTextFile'};
var _user$project$FileReader$readAsTextFile = function (fileRef) {
	return _user$project$FileReader$isTextFile(fileRef) ? _user$project$Native_FileReader.readAsTextFile(fileRef) : _elm_lang$core$Task$fail(_user$project$FileReader$NotTextFile);
};
var _user$project$FileReader$ReadFail = {ctor: 'ReadFail'};
var _user$project$FileReader$NoValidBlob = {ctor: 'NoValidBlob'};
