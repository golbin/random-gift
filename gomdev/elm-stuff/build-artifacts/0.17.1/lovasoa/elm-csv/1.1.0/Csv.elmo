var _lovasoa$elm_csv$Csv$trimQuotes = function (value) {
	var end = A2(_elm_lang$core$String$endsWith, '\"', value);
	var start = A2(_elm_lang$core$String$startsWith, '\"', value);
	return (start && end) ? A2(
		_elm_lang$core$String$dropLeft,
		1,
		A2(
			_elm_lang$core$String$dropRight,
			1,
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('[\"\\\\]\"'),
				_elm_lang$core$Basics$always('\"'),
				value))) : value;
};
var _lovasoa$elm_csv$Csv$splitLineWith = F2(
	function (separator, line) {
		var values = A2(_elm_lang$core$String$split, separator, line);
		return A2(
			_elm_lang$core$List$map,
			function (_p0) {
				return _lovasoa$elm_csv$Csv$trimQuotes(
					_elm_lang$core$String$trim(_p0));
			},
			values);
	});
var _lovasoa$elm_csv$Csv$splitLine = _lovasoa$elm_csv$Csv$splitLineWith(',');
var _lovasoa$elm_csv$Csv$splitWith = F2(
	function (separator, lines) {
		var values = A2(
			_elm_lang$core$List$filter,
			function (x) {
				return _elm_lang$core$Basics$not(
					_elm_lang$core$String$isEmpty(x));
			},
			_elm_lang$core$String$lines(lines));
		return A2(
			_elm_lang$core$List$map,
			_lovasoa$elm_csv$Csv$splitLineWith(separator),
			values);
	});
var _lovasoa$elm_csv$Csv$split = _lovasoa$elm_csv$Csv$splitWith(',');
var _lovasoa$elm_csv$Csv$parseWith = F2(
	function (separator, lines) {
		var values = A2(_lovasoa$elm_csv$Csv$splitWith, separator, lines);
		var headers = A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$List$head(values));
		var records = A2(_elm_lang$core$List$drop, 1, values);
		return {headers: headers, records: records};
	});
var _lovasoa$elm_csv$Csv$parse = _lovasoa$elm_csv$Csv$parseWith(',');
var _lovasoa$elm_csv$Csv$Csv = F2(
	function (a, b) {
		return {headers: a, records: b};
	});
